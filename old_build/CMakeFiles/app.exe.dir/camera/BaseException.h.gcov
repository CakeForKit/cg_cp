        -:    0:Source:/home/kathrine/cg_cp/exceptions/BaseException.h
        -:    0:Graph:Camera.cpp.gcno
        -:    0:Data:Camera.cpp.gcda
        -:    0:Runs:2
        -:    1:#pragma once
        -:    2:
        -:    3:#include <exception>
        -:    4:
        -:    5:class BaseException : public std::exception
        -:    6:{
        -:    7:public:
        -:    8:    BaseException(const char *time, const char *filename,
        -:    9:                  const size_t line, const char *class_name,
        -:   10:                  const char *method_name, const char *info = "no info") noexcept;
        -:   11:
        -:   12:    const char* what() const noexcept override;
        -:   13:
    #####:   14:    virtual ~BaseException() {};
------------------
_ZN13BaseExceptionD0Ev:
    #####:   14:    virtual ~BaseException() {};
------------------
_ZN13BaseExceptionD2Ev:
    #####:   14:    virtual ~BaseException() {};
------------------
        -:   15:protected:
        -:   16:    char ErrorInfo[1000];
        -:   17:};
        -:   18:
        -:   19:#pragma region Abstracts of groups
        -:   20:
        -:   21:class TrianglesModelException: public BaseException
        -:   22:{
        -:   23:public:
        -:   24:    TrianglesModelException(const char *time, const char *filename,
        -:   25:                  const size_t line, const char *class_name,
        -:   26:                  const char *method_name, const char *info = "TrianglesModelException") noexcept:
        -:   27:                  BaseException(time, filename, line, class_name, method_name, info){};
        -:   28:};
        -:   29:
        -:   30:class TriangleException: public BaseException
        -:   31:{
        -:   32:public:
        -:   33:    TriangleException(const char *time, const char *filename,
        -:   34:                  const size_t line, const char *class_name,
        -:   35:                  const char *method_name, const char *info = "TriangleException") noexcept:
        -:   36:                  BaseException(time, filename, line, class_name, method_name, info){};
        -:   37:};
        -:   38:
        -:   39:class CameraException: public BaseException
        -:   40:{
        -:   41:public:
    #####:   42:    CameraException(const char *time, const char *filename,
        -:   43:                  const size_t line, const char *class_name,
    #####:   44:                  const char *method_name, const char *info = "CameraException") noexcept:
    #####:   45:                  BaseException(time, filename, line, class_name, method_name, info){};
        -:   46:};
        -:   47:
        -:   48:class SceneException: public BaseException
        -:   49:{
        -:   50:public:
        -:   51:    SceneException(const char *time, const char *filename,
        -:   52:                  const size_t line, const char *class_name,
        -:   53:                  const char *method_name, const char *info = "SceneException") noexcept:
        -:   54:                  BaseException(time, filename, line, class_name, method_name, info){};
        -:   55:};
        -:   56:
        -:   57:class ReadException: public BaseException
        -:   58:{
        -:   59:public:
        -:   60:    ReadException(const char *time, const char *filename,
        -:   61:                  const size_t line, const char *class_name,
        -:   62:                  const char *method_name, const char *info = "ReadException") noexcept:
        -:   63:                  BaseException(time, filename, line, class_name, method_name, info){};
        -:   64:};
        -:   65:
        -:   66:class BuilderException: public BaseException
        -:   67:{
        -:   68:public:
        -:   69:    BuilderException(const char *time, const char *filename,
        -:   70:                  const size_t line, const char *class_name,
        -:   71:                  const char *method_name, const char *info = "BuilderException") noexcept:
        -:   72:                  BaseException(time, filename, line, class_name, method_name, info){};
        -:   73:};
        -:   74:
        -:   75:// class DirectorException: public BaseException
        -:   76:// {
        -:   77:// public:
        -:   78://     DirectorException(const char *time, const char *filename,
        -:   79://                   const size_t line, const char *class_name,
        -:   80://                   const char *method_name, const char *info = "DirectorException") noexcept:
        -:   81://                   BaseException(time, filename, line, class_name, method_name, info){};
        -:   82:// };
        -:   83:
        -:   84:class GuiException: public BaseException
        -:   85:{
        -:   86:public:
        -:   87:    GuiException(const char *time, const char *filename,
        -:   88:                  const size_t line, const char *class_name,
        -:   89:                  const char *method_name, const char *info = "GuiException") noexcept:
        -:   90:                  BaseException(time, filename, line, class_name, method_name, info){};
        -:   91:};
        -:   92:
        -:   93:#pragma region end
        -:   94:
        -:   95:#pragma region StandartException
        -:   96:
        -:   97:class IndexException: public BaseException
        -:   98:{
        -:   99:public:
        -:  100:    IndexException(const char *time, const char *filename,
        -:  101:                  const size_t line, const char *class_name,
        -:  102:                  const char *method_name, const char *info = "Index out of range") noexcept:
        -:  103:                  BaseException(time, filename, line, class_name, method_name, info){};
        -:  104:};
        -:  105:
        -:  106:class DivZeroException: public BaseException
        -:  107:{
        -:  108:public:
        -:  109:    DivZeroException(const char *time, const char *filename,
        -:  110:                  const size_t line, const char *class_name,
        -:  111:                  const char *method_name, const char *info = "Division zero") noexcept:
        -:  112:                  BaseException(time, filename, line, class_name, method_name, info){};
        -:  113:};
        -:  114:
        -:  115:class ParameterFuncException: public BaseException
        -:  116:{
        -:  117:public:
        -:  118:    ParameterFuncException(const char *time, const char *filename,
        -:  119:                  const size_t line, const char *class_name,
        -:  120:                  const char *method_name, const char *info = "Error parameter function") noexcept:
        -:  121:                  BaseException(time, filename, line, class_name, method_name, info){};
        -:  122:};
        -:  123:
        -:  124:class NormalizeDivZeroException: public BaseException
        -:  125:{
        -:  126:public:
        -:  127:    NormalizeDivZeroException(const char *time, const char *filename,
        -:  128:                  const size_t line, const char *class_name,
        -:  129:                  const char *method_name, const char *info = "Division zero in normalizing vector") noexcept:
        -:  130:                  BaseException(time, filename, line, class_name, method_name, info){};
        -:  131:};
        -:  132:#pragma region end
