        -:    0:Source:/home/kathrine/cg_cp/camera/Camera.cpp
        -:    0:Graph:Camera.cpp.gcno
        -:    0:Data:Camera.cpp.gcda
        -:    0:Runs:2
        -:    1:#include "Camera.h"
        -:    2:
        2:    3:std::ostream& operator<<(std::ostream &os, const Camera &camera) {
        2:    4:    return camera.print(os);
        -:    5:}
        -:    6:
        2:    7:std::ostream& Camera::print(std::ostream& os) const noexcept {
        2:    8:    os << "Camera: \n";
        2:    9:    os << "\tright=" << right << ", up=" << up << ", dir=" << dir <<std::endl;
        2:   10:    os << "\tcameraPos = " << cameraPos << std::endl;
        -:   11:    // os << "\tfocalLength = " << focalLength << std::endl;
        -:   12:    // os << "\tviewportWidth = " << viewportWidth << std::endl;
        -:   13:    // os << "\tviewportHeight = " << viewportHeight << std::endl;
        -:   14:    // os << "\tcountPixWidth = " << _countPixWidth << std::endl;
        -:   15:    // os << "\tcountPixHeight = " << _countPixHeight << std::endl;
        -:   16:    // os << "\twidth_of_one_pixel = " << width_of_one_pixel << "\n\theight_of_one_pixel = " << height_of_one_pixel << std::endl;
        -:   17:    // os << "\tupperLeftPixelCoord = " << upperLeftPixelCoord << std::endl;
        2:   18:    return os;
        -:   19:}
        -:   20:
        2:   21:Camera::Camera() noexcept 
        2:   22:: right(1, 0, 0), up(0, 1, 0), dir(0, 0, 1), 
        2:   23:focalLength(FOCAL_LENGHT), cameraPos(0, 0, focalLength), viewportHeight(VIEWPORT_HEIGHT) {
        2:   24:    std::cout << "Camera()" << *this << "\n";
        2:   25:}
        -:   26:
        1:   27:void Camera::setCountPixelsViewport(size_t countPixWidth, size_t countPixHeight) {
        1:   28:    if (countPixWidth == 0 || countPixHeight == 0) {
    #####:   29:        time_t curTime = time(NULL);
    #####:   30:        throw CountPixelsCameraException(ctime(&curTime), __FILE__, __LINE__, typeid(*this).name(), __func__);
        -:   31:    }
        1:   32:    _countPixWidth = countPixWidth;
        1:   33:    _countPixHeight = countPixHeight;
        -:   34:
        1:   35:    viewportWidth = viewportHeight * (static_cast<float>(countPixWidth) / static_cast<float>(countPixHeight));
        1:   36:    width_of_one_pixel = viewportWidth * right / static_cast<float>(countPixWidth); // ширина одного пикселя
        1:   37:    height_of_one_pixel = viewportHeight * up / static_cast<float>(countPixHeight); // высота одного пикселя 
        -:   38:    
        1:   39:    countPixelsViewportSet = true;
        1:   40:    updateUpperLeftPixelCoord();
        -:   41:
        -:   42:    // std::cout << "Use camera:\n" << *this;
        1:   43:}
        -:   44:
        1:   45:void Camera::setFocalLength(float focal_length, bool update) {
        1:   46:    if (focal_length < EPS) {   // focal_length < 0
    #####:   47:        time_t curTime = time(NULL);
    #####:   48:        throw FocalLengthCameraException(ctime(&curTime), __FILE__, __LINE__, typeid(*this).name(), __func__);
        -:   49:    }
        1:   50:    focalLength = focal_length;
        1:   51:    if (update)
    #####:   52:        updateUpperLeftPixelCoord();
        1:   53:}
        -:   54:
        1:   55:void Camera::setViewportHeight(float viewport_height, bool update) {
        1:   56:    if (viewport_height < EPS) {   // viewport_height < 0
    #####:   57:        time_t curTime = time(NULL);
    #####:   58:        throw ViewportHeightCameraException(ctime(&curTime), __FILE__, __LINE__, typeid(*this).name(), __func__);
        -:   59:    }
        1:   60:    viewportHeight = viewport_height;
        1:   61:    if (update)
    #####:   62:        updateUpperLeftPixelCoord();
        1:   63:}
        -:   64:
        1:   65:void Camera::setCameraPos(Point3 pos, bool update) noexcept {
        1:   66:    cameraPos = pos;
        1:   67:    if (update)
    #####:   68:        updateUpperLeftPixelCoord();
        1:   69:}
        -:   70:
        1:   71:void Camera::updateUpperLeftPixelCoord() {
        1:   72:    if (!countPixelsViewportSet) {
    #####:   73:        time_t curTime = time(NULL);
    #####:   74:        throw NotSetPixelsCameraException(ctime(&curTime), __FILE__, __LINE__, typeid(*this).name(), __func__);
        -:   75:    }
        -:   76:
        -:   77:    // координаты левой верхней видимой точки
        1:   78:    Point3 upperLeftCoord = cameraPos - right * (viewportWidth / 2) + up * (viewportHeight / 2) - dir * focalLength;
        -:   79:    // координата центра пикселя (0, 0)
        1:   80:    upperLeftPixelCoord = upperLeftCoord + 0.5 * width_of_one_pixel - 0.5 * height_of_one_pixel;
        1:   81:}
        -:   82:
        1:   83:Vector3 Camera::getCameraPos() const noexcept {
        1:   84:    return cameraPos;
        -:   85:}
        -:   86:
    #####:   87:Vector3 Camera::getAxis(Axis axis) const noexcept {
    #####:   88:    if (axis == Axis::OY) {
    #####:   89:        return up;
    #####:   90:    } else if (axis == Axis::OX) {
    #####:   91:        return right;
    #####:   92:    } else if (axis == Axis::OZ) {
    #####:   93:        return dir;
        -:   94:    } else {
    #####:   95:        assert(false);
        -:   96:    }
        -:   97:}
        -:   98:
        4:   99:Ray Camera::createRay(int ip, int jp) {
        4:  100:    if (!countPixelsViewportSet) {
    #####:  101:        time_t curTime = time(NULL);
    #####:  102:        throw NotSetPixelsCameraException(ctime(&curTime), __FILE__, __LINE__, typeid(*this).name(), __func__);
        -:  103:    }
        -:  104:
        4:  105:    Vector3 pixelCoord = upperLeftPixelCoord + static_cast<double>(ip) * width_of_one_pixel - static_cast<double>(jp) * height_of_one_pixel;
        4:  106:    Vector3 rayDirection = pixelCoord - cameraPos;
        4:  107:    rayDirection.normalize();
        8:  108:    return Ray(cameraPos, rayDirection);
        -:  109:}
        -:  110:
        1:  111:void Camera::transform(const std::shared_ptr<TransformAction> action) {
        1:  112:    Vector3 newCameraPos = action->transform(cameraPos);
        1:  113:    double nowLen = cameraPos.length();
        1:  114:    double newLen = newCameraPos.length();
        1:  115:    std::cout << "nowLen = " << nowLen << "\n";
        1:  116:    std::cout << "newLen = " << newLen << "\n";
       1*:  117:    if (nowLen - newLen > EPS && nowLen - newLen > nowLen - 320) {
    #####:  118:        time_t curTime = time(NULL);
    #####:  119:        throw TooCloseCameraException(ctime(&curTime), __FILE__, __LINE__, typeid(*this).name(), __func__);
        -:  120:    }
        1:  121:    cameraPos = newCameraPos;
        1:  122:    dir = cameraPos - Vector3(0, 0, 0);
        1:  123:    dir.normalize();
        1:  124:    right = -dir.vectorProduct(Vector3(0, 1, 0));
        1:  125:    right.normalize();
        1:  126:    up = dir.vectorProduct(right);
        1:  127:    up.normalize();
        -:  128:    // right = action->transform(right);
        -:  129:    // up = action->transform(up);
        -:  130:    // dir = action->transform(dir);
        1:  131:}
