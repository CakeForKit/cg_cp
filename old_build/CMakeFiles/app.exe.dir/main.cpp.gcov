        -:    0:Source:/home/kathrine/cg_cp/main.cpp
        -:    0:Graph:main.cpp.gcno
        -:    0:Data:main.cpp.gcda
        -:    0:Runs:2
        -:    1:#include "MainWindow.h"
        -:    2:
        -:    3:#include <iostream>
        -:    4:#include <gtest/gtest.h>
        -:    5:
        -:    6:#include "Vector3.h"
        -:    7:
    #####:    8:void see_work_vector() {
    #####:    9:    Vector3 v0;
    #####:   10:    Vector3 v1(1, 2, 3);
    #####:   11:    Vector3 v2(v1);
    #####:   12:    Vector3 v3 = Vector3(1, 1, 1);
    #####:   13:    v2 = v0;
    #####:   14:    v2.setX(4);
    #####:   15:    std::cout << "(0, 0, 0)(1, 2, 3)(4, 0, 0)(1, 1, 1)" << std::endl;
    #####:   16:    std::cout << v0 << v1 << v2 << v3 << std::endl;
        -:   17:
    #####:   18:    std::cout << "4 = " << v1.scalarProduct(v2) << std::endl;
    #####:   19:    v3 = Vector3(3, 2, 1, 0.5);
    #####:   20:    std::cout << v1 << v3 << std::endl;
    #####:   21:    std::cout << "(-8, 16, -8) = " << v1.vectorProduct(v3) << std::endl;
        -:   22:
    #####:   23:    std::cout << "3.7416 " << v1.length() << std::endl;
    #####:   24:    std::cout << v1.normalized() << std::endl;
    #####:   25:}
        -:   26:
        -:   27:#include "Triangle.h"
        -:   28:
    #####:   29:void see_work_triangle() {
    #####:   30:    std::shared_ptr<Point3> p1, p2, p3, p4;
    #####:   31:    p1 = std::make_shared<Point3>();
    #####:   32:    p2 = std::make_shared<Point3>(1, 1, 1);
    #####:   33:    p3 = std::make_shared<Point3>(1, 2, 3);
    #####:   34:    p4 = std::make_shared<Point3>(11, 0, 0);
        -:   35:
    #####:   36:    Triangle tr1(p1, p2, p3);
    #####:   37:    std::cout << "tr1 = ";
    #####:   38:    tr1.print_debug_info();
    #####:   39:    p1->setX(11);                           // В этот момент может нарушиться целостность обьекта, Надо убрать возможность ихменять координаты точки снаружи
    #####:   40:    std::cout << "tr1 = ";
    #####:   41:    tr1.print_debug_info();
        -:   42:
    #####:   43:    Triangle tr2(tr1);
    #####:   44:    std::cout << "tr2 = ";
    #####:   45:    tr2.print_debug_info();
        -:   46:
    #####:   47:    Triangle tr3(p2, p4, p3);
    #####:   48:    std::cout << "tr3 = ";
    #####:   49:    tr3.print_debug_info();
    #####:   50:    std::cout << "tr3 == tr1 - " << (tr1 == tr3) << std::endl;
    #####:   51:}
        -:   52:
        -:   53:#include "TrianglesModel.h"
        -:   54:
    #####:   55:void see_work_triangles_model() {
    #####:   56:    std::cout << "see_work_triangles_model: \n";
        -:   57:
    #####:   58:    TrianglesModel model;
        -:   59:    {
    #####:   60:        std::shared_ptr<Point3> p1, p2, p3, p4, same_p2;
    #####:   61:        p1 = std::make_shared<Point3>();
    #####:   62:        p2 = std::make_shared<Point3>(1, 1, 1);
    #####:   63:        p3 = std::make_shared<Point3>(1, 2, 3);
    #####:   64:        p4 = std::make_shared<Point3>(3, 4, 3);
    #####:   65:        same_p2 = std::make_shared<Point3>(1, 1, 1);
    #####:   66:        std::cout << "use_count p1 = " << p1.use_count() << std::endl;
        -:   67:        
    #####:   68:        model.addFace({p1, p2, p3});
    #####:   69:        model.addFace({p1, same_p2, p4});
    #####:   70:        model.addFace({p2, p4, p1});
    #####:   71:    }
        -:   72:
    #####:   73:    std::cout << model;
        -:   74:    
        -:   75:
    #####:   76:    for (auto p : model.getVertices()) {
    #####:   77:        p->setX(p->x() + 10);
    #####:   78:    }
    #####:   79:    std::cout << "\ncoord x += 10:" << std::endl;
        -:   80:
    #####:   81:    std::cout << model;
    #####:   82:}
        -:   83:
        -:   84:#include "Scene.h"
        -:   85:
    #####:   86:void see_work_scene() {
    #####:   87:    Scene scene;
    #####:   88:    std::cout << scene << std::endl;
    #####:   89:    scene.addCamera();
    #####:   90:    std::cout << *(scene.getCamera(1)) <<std::endl;
    #####:   91:    std::cout << scene;
    #####:   92:}
        -:   93:
        -:   94:#include "TrianglesModelReader.h"
        -:   95:
    #####:   96:void see_work_read() {
        -:   97:    try {
    #####:   98:        TrianglesModelReader reader("/home/kathrine/cg_cp/data/test_model_1.txt");
    #####:   99:        reader.open();
    #####:  100:        reader.readData();
    #####:  101:    } catch (BaseException &ex) {
    =====:  102:        std::cout << ex.what() << "\n";
    =====:  103:    }
        -:  104:    
    #####:  105:}
        -:  106:
        2:  107:int main(int argc, char **argv)
        -:  108:{
        2:  109:    std::cout << "It works!" << std::endl;
        -:  110:    // see_work_scene();
        -:  111:
        2:  112:    if (argc == 2) {
        1:  113:        std::cout << "See params" << std::endl;
        -:  114:
        1:  115:        if (strcmp(argv[1], "-test") == 0) {
        -:  116:
        1:  117:            ::testing::InitGoogleTest(&argc, argv);
        -:  118:
        1:  119:            return RUN_ALL_TESTS();
    #####:  120:        } else if (strcmp(argv[1], "-s") == 0) {
        -:  121:            try {
        -:  122:                // see_work_director();
        -:  123:            } catch (BaseException &ex) {
        -:  124:                std::cout << ex.what() << "\n";
        -:  125:            }
    #####:  126:        } else if (strcmp(argv[1], "-time") == 0) {
    #####:  127:            QApplication app (argc, argv);
    #####:  128:            MainWindow mainwindow;
    #####:  129:            mainwindow.show();
    #####:  130:            mainwindow.hide();
    #####:  131:            mainwindow.measureRenderTime();
    #####:  132:            return app.exec();
    #####:  133:        }
        -:  134:    } else {
        1:  135:        QApplication app (argc, argv);
        1:  136:        MainWindow mainwindow;
        1:  137:        mainwindow.show();
        1:  138:        return app.exec();
        1:  139:    }
        -:  140:
    #####:  141:}
